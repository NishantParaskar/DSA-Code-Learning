import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

//https://www.interviewbit.com/problems/equal/hints/
//https://getsdeready.com/courses/design-dsa-combined/lesson/equal-2/
public class Equals {
	
	
	public static void main(String[] args) {
		
				//   0  1  2  3  4  5  6
//		int arr[] = {3, 4, 7, 1, 2, 9, 8} ;
		int arr[] ={ 0, 0, 1, 0, 2, 1} ;
		System.out.println("=================MY====================");
		int output[] = equal(arr) ; 
		System.out.println(Arrays.toString(output));
		System.out.println("=================chatgpt====================");
		int output1[] = equal1(arr) ; 
		System.out.println(Arrays.toString(output1));
		System.out.println("================My 2=====================");		
		System.out.println(equal2(arr));
		
	}

	
	//Brute Force Approch : O(n^4)  . Single pair 
	private static int[] equal(int[] arr) 
	{
		
		for (int i = 0; i < arr.length; i++) {
			
			for (int j = i+1; j < arr.length; j++) {
				
				for (int k = j+1;k < arr.length;k++) {
					
					for (int l = k+1; l < arr.length; l++) {
						
					if(arr[i] +  arr[j] == arr[k] + arr[l])
						{
							return new int[]{i,j,k,l} ;
							
						}
					
						
						
					}
				}
			}
		}

		return new int[]{};
	}
	
	
    public static int[] equal1(int[] arr) {
        int n = arr.length;
        int[] result = null;

        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                for (int k = j + 1; k < n; k++) {
                    for (int l = k + 1; l < n; l++) {
                        if (arr[i] + arr[j] == arr[k] + arr[l]) {
                            int[] candidate = {i, j, k, l};
                            if (result == null || compareTuples(candidate, result) < 0) {
                                result = candidate;
                            }
                        }
                    }
                }
            }
        }

        return result == null ? new int[]{} : result;
    }

    private static int compareTuples(int[] a, int[] b) {
        for (int i = 0; i < a.length; i++) {
            if (a[i] != b[i]) {
                return a[i] - b[i];
            }
        }
        return 0;
    }
	
	
	
	
	
	
	
	
	
	
	//Brute Force Approch : O(n^4)  . All pair 
	private static List<List<Integer>> equal2(int[] arr) 
	{
		 List<List<Integer>>  output = new ArrayList() ;
		
		for (int i = 0; i < arr.length; i++) {
			
			for (int j = i+1; j < arr.length; j++) {
				
				for (int k = j+1;k < arr.length;k++) {
					
					for (int l = k+1; l < arr.length; l++) {
						
						if(arr[i] +  arr[j] == arr[k] + arr[l])
						{
							 List<Integer> pair = new ArrayList() ;
							 output.add(Arrays.asList(i,j,k,l)) ;
							 
						
							
						}
						
					}
				}
			}
		}

		return output;
	}

	
	
	//Optimizing the 

}

import java.lang.reflect.Array;
import java.util.Arrays;

public class AggressiveCows {

	public static void main(String[] args) {
		int stalls[] = {};
		int k = 2;

		int output = AggressiveCowsMaxofMin(stalls, k);

		System.out.println("The output is :" + output);
	}

	private static int AggressiveCowsMaxofMin(int[] stalls, int k) 
	{ 		int n = stalls.length ;
		
		Arrays.sort(stalls);  // sorrted 
		
		int low = 0 ;
        int high = stalls[n - 1] - stalls[0];  // not properly understood check later
        
        int ans =-1 ;
        while(low<=high)
        {
        	int mid  = (low + high) /  2 ;
        	
        }
		
		
		return 0;
	}

	static boolean possibleTPlace(int stalls[], int distance, int cow) {
		int n = stalls.length ;
		int numberofCowsPlace = 1;  //no. of cows placed
		int lastCowPlace = stalls[0];  //position of last placed cow.

		for (int checkPlacement = 1; checkPlacement < n; checkPlacement++) {

			if (stalls[checkPlacement] - stalls[lastCowPlace] >= distance) {
				numberofCowsPlace++;  //place next cow.
				lastCowPlace = checkPlacement;  //update the last location.

			}
			if (numberofCowsPlace >= cow) {
				return true;
			}
		}
		return false;

	}
	
	public static boolean canWePlace(int[] stalls, int dist, int cows) {
        int n = stalls.length; //size of array
        int cntCows = 1; //no. of cows placed
        int last = stalls[0]; //position of last placed cow.
        for (int i = 1; i < n; i++) {
            if (stalls[i] - last >= dist) {
                cntCows++; //place next cow.
                last = stalls[i]; //update the last location.
            }
            if (cntCows >= cows) return true;
        }
        return false;
    }

}
